_id: 3e751823-ebce-47c1-9b0d-f760991e3d0a
_parent: 2006-01-06-algoritmos-qual-a-utilidade-do-algoritmo
reply_to: ''
name: 'pedro henrique'
email: a54b038fd1e7f34fbdfacb87d03a62e2
body: 'Tiago, Boa Noite, vamos lá: Acho que é questão de opinião. Eu expresso a minha, você a sua, não há uma opinião "melhor", fato é que nossas realidades são diferentes. Você provavelmente é mais velho que eu, está em outra fase, já trabalhou mais que eu neste ramo e por isso tem uma postura mais "mercado de trabalho", que é importante, mas não é o escopo do site. > A minha postura é tanto "ciência" quanto "mercado de trabalho", isto porque sou tão apaixonado pela ciência quanto pela tecnologia em si (tanto pelo "criar" quanto pelo "reutilizar"). Saber o contexto que cada uma se aplica é de suma importância, para poder fazer um bom uso. Quando escreveu o trecho que comentei, estava fora do escopo do site. Mas meu interesse não é julgá-lo. Na verdade, meu comentário não é sobre isto, não estou discutindo opiniões (que em geral são motivadas por gosto). Discuto mais a informação que foi dada e da forma como foi passada. > Discordamos em vários pontos por causa desta diferença. Mas, no entanto, concordo que o parágrafo não teve relevância para o assunto explanado. Essa foi uma boa colocação sua, que inclusive me deu a idéia de revisar esse texto para deixá-lo mais coerente. Mais tarde faço isso. > Embora, seja um caminho diferente, e menos apreciado por uns, é de igual importância, e vou responder o porquê, lá em baixo. > Agora... Na minha opinião, a minha frase não é inverídica, pois a carga de algoritmos de um curso de sistemas de informação é muito inferior a de um curso de ciência da computação (você mesmo concordou que eles fazem o trabalho "de pedreiros"). > Isto não prova muita coisa. Conheço alguns vários pedreiros da Ciência da Computação. Neste caso, estamos discutindo o óbvio, a carga não é a mesma porque o propósito do curso não é o mesmo. Esta informação não disse menos ou mais sobre qualquer profissional (ou sobre qualquer tipo, já que preferiu tipificar). > Numa discussão sobre algoritmos uma ideologia acadêmica é muito mais normal do que uma ideologia de engenheiro de software como a que você trouxe. ATD? Isso sim é o "fora da realidade". > Leia novamente, estava falando de linguagens e não algoritmos, porque falou sobre linguagens. Mais uma coisa, pode-se fazer ATD de algoritmos também e até aconselhável por você, pois Análise de Algoritmo citada, é um dos critérios na tomada de decisão. Procure entender do que estamos falando antes de tipificar alguma coisa ou alguém, porque até para tipificar você precisa tomar decisões baseadas em critérios. Portanto, na sua realidade, você tem feito várias ATDs e nem sabe. E nem por isso vou tipificá-lo de algo. Não saber não é um crime. Não me tenha como inimigo, estou mostrando algumas outras perspectivas que talvez não tenha conhecido. > Estudar algoritmos não é reinventar a roda, mas entender como ela é feita. E isso é importantíssimo para que a ciência possa evoluir. > E eu não disse o contrário. Entender como é feito, é tudo (em um sentido). Ajuda em diversas atividades. Isto não quer dizer que, por exemplo, para você dirigir um carro e fazer bom uso dele, precisa ser mecânico. Falando em academia e ciência, no que teríamos que discordar? > Eu trabalho com programação de pedreiro há anos, não sou tão radical quanto você pensa e nem acho que seja um trabalho inútil, mas não acho que alguém cresça intelectualmente usando frameworks ou que faça a ciência da computação evoluir. > Bom, então já deve ter percebido que a comparação não tem fundamento. Por que: 1) No nosso caso, para ser um bom "engenheiro", é imprecindível ser um bom "pedreiro" antes. (leia o final deste trecho, para entender) 2) Dois porque isto não se aplica no caso da engenharia civil. Aliás, a muito tempo não se compara computaçào com engenharia civil, porque as métricas atuais são completamente distintas. As técnicas de gerência de projetos atuais deixam isto claro. O COM+ é um framework que, sem sombra de dúvida, se você estudar a fundo sua arquitetura (e entender os algoritmos) vai crescer intelectualmente. Os sockets BSD que são modelos para várias implementações também tem bastante coisa para mudar a sua mente. Mas se "frameworks" para você é somente o Hibernate, Struts, BCL do .Net (porque até o CLR do .Net tem muito a ensinar de algoritmos) e família, então estamos perdendo tempo. Tem muita coisa bem feita por aí que você não precisa usar sem saber (e crescer intelectualmente). A diferença está na atitude do profissional e não no curso que ele está fazendo. Quanto a evolução da ciência, neste ponto, tenho que discordar. Entendendo implementações de outras frameworks (que podem ser das mais complexas as mais simples, para Telecom, dispositivos, segurança ela vai fumaça, por exemplo) e uso de conceitos científicos nas mesmas e aprimorá-los para novos experimentos. > Além disso, eu não disse que pedreiros são inúteis em momento algum, você que interpretou isto e veio com argumentos como "sem pedreiros, engenheiros constroem belos papéis". > É verdade, gostaria de me desculpar. O "não passam de pedreiros" não me soou bem. > Sobre VBScript, é questão de fé. > Heim? Fé? Saímos da ciência para fé? Você escolhe software pela fé? > Eu não confio em softwares proprietários, por isso não uso. E como o escopo aqui é acadêmico, e não "mercado de trabalho", não há porque se preocupar com usuários de Windows, assim como eu poderia não me preocupar com usuários de qualquer outro sistema operacional. > Bom, aqui já nos distanciamos do propósito e passou para o irracional. Não escolho software por fé (aliás, nem Richard Stallman faz isso) e adoro Free Softwares também. Mas sobre softwares, tendo uma necessidade, planejo e soluciono o problema com o mesmo. Quanto a confiança não se preocupe, saindo da faculdade e conhecendo outros ambientes, logo aprende que tem ótimos programadores nas empresas privadas também. Tão bons quanto os que desenvolvem free softwares. Além disso, você verá muito código porco free. O que não me faz tipificar os programadores dos mesmos softwares. Novamente, estamos falando de atitudes e contextos, não de cursos e academia. > E, de qualquer maneira, tanto um usuário de VBScript quanto um programador de C pode aplicar os conceitos deste site. Aliás, o meu exemplo no texto foi justamente pra ilustrar que pseudocódigos são uma maneira fácil de comunicação entre programadores (i.e., eu não preciso programar em VBScript, posso fazer o algoritmo e passar o trabalho sujo em VBScript para os pedreiros). > Hahaha, trabalho sujo. Já vi alguns engenheiros apanhando na hora de fazer o trabalho sujo. Sabe como é, a academia nos dá muita teoria, mas o mundo não vive de teoria. Nem sempre dá para fazermos o que queremos em Ansi-C (aliás eu esqueci uma palavra no comentário e o que queria dizer "é que C não é a melhor solução para tudo") e quando se tem alguma experiência, sabe-se disso. E quem vos fala trabalha com foco principal em C e C++ (e também são minhas linguagens de preferência). Mas isto aprende-se com o tempo. Minha intenção é apenas lhe dar um pouquinho mais de experiências extra acadêmicas. Como estamos na fé, não tenho muito mais o que discutir, como deixou claro é só uma questão de gosto. > > No mais, a palavra é uma ótima ferramenta, quando bem utilizada pode fazer coisas maravilhosas, ou quando mal, grandes estragos. A minha sugestão que é que mantenha a qualidade dos artigos num foco mais científico, evitando especular muito sobre "pessoas", a fim de não criar uma esfera de polêmica inútil e pouco fundamentada. Isto não contribui em nada para a evolução da ciência, se é o que lhe preocupa. É um ótimo site para aprender sobre algoritmos. Fica novamente o elogio. Qualquer erro de digitação me desculpe é que são 00:40 e sono está no seu nível máximo. Cordialmente, Pedro Henrique'
date: '2008-11-05T03:48:40.000Z'
timestamp: 1225856920
