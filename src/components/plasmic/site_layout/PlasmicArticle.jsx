// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: 3RgVkGyAq0r
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import TextContent from "../../TextContent"; // plasmic-import: cLfqUBakSC/component
import TagList from "../../TagList"; // plasmic-import: 5P9Z-2oNX3/component
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicArticle.css"; // plasmic-import: 3RgVkGyAq0r/css

export const PlasmicArticle__VariantProps = new Array();

export const PlasmicArticle__ArgProps = new Array("title", "date", "children");

function PlasmicArticle__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <article
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__article",
        "root_reset_oH8FCw6CW4Lg76cBx26GoT",
        "Article__root__aHmRz"
      )}
    >
      <h1
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__h1",
          "Article__title___2EtOg"
        )}
      >
        <p.PlasmicSlot
          defaultContents={""}
          value={args.title}
          className={classNames("Article__slotTitle___4AoPv")}
        />
      </h1>

      <div
        data-plasmic-name={"date"}
        data-plasmic-override={overrides.date}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Article__date__g2S7E"
        )}
      >
        <p.PlasmicSlot
          defaultContents={""}
          value={args.date}
          className={classNames("Article__slotDate__dZg6E")}
        />
      </div>

      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Article__content__lMoNr"
        )}
      >
        <p.PlasmicSlot
          defaultContents={
            <TextContent
              data-plasmic-name={"textContent"}
              data-plasmic-override={overrides.textContent}
              className={classNames(
                "__wab_instance",
                "Article__textContent__dUzp6"
              )}
            />
          }
          value={args.children}
        />
      </div>

      <TagList
        data-plasmic-name={"tags"}
        data-plasmic-override={overrides.tags}
        className={classNames("__wab_instance", "Article__tags__ldbiS")}
      />
    </article>
  );
}

const PlasmicDescendants = {
  root: ["root", "title", "date", "content", "textContent", "tags"],
  title: ["title"],
  date: ["date"],
  content: ["content", "textContent"],
  textContent: ["textContent"],
  tags: ["tags"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticle__ArgProps,
      internalVariantPropNames: PlasmicArticle__VariantProps,
    });

    return PlasmicArticle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticle";
  } else {
    func.displayName = `PlasmicArticle.${nodeName}`;
  }
  return func;
}

export const PlasmicArticle = Object.assign(
  // Top-level PlasmicArticle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    date: makeNodeComponent("date"),
    content: makeNodeComponent("content"),
    textContent: makeNodeComponent("textContent"),
    tags: makeNodeComponent("tags"),
    // Metadata about props expected for PlasmicArticle
    internalVariantProps: PlasmicArticle__VariantProps,
    internalArgProps: PlasmicArticle__ArgProps,
  }
);

export default PlasmicArticle;
/* prettier-ignore-end */
