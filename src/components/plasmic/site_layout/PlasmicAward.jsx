// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: cOAv4QMHX7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicAward.css"; // plasmic-import: cOAv4QMHX7/css
import AwardsvgIcon from "./PlasmicIcon__Awardsvg"; // plasmic-import: LnEYthlvR/icon

export const PlasmicAward__VariantProps = new Array();

export const PlasmicAward__ArgProps = new Array(
  "title",
  "description",
  "badge"
);

function PlasmicAward__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"li"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__li",
        "root_reset_oH8FCw6CW4Lg76cBx26GoT",
        "Award__root___1Lt3P"
      )}
    >
      <AwardsvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__svg",
          "Award__svg__kysE"
        )}
        role={"img"}
      />

      <div
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Award__box__pdrAm"
        )}
      >
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Award__box__d2Bi"
          )}
        >
          <p.PlasmicSlot
            defaultContents={""}
            value={args.title}
            className={classNames("Award__slotTitle__sSzf1")}
          />
        </div>

        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Award__box__jgqH"
          )}
        >
          <p.PlasmicSlot
            defaultContents={""}
            value={args.description}
            className={classNames("Award__slotDescription__c78El")}
          />
        </div>
      </div>

      <p.PlasmicSlot defaultContents={null} value={args.badge} />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAward__ArgProps,
      internalVariantPropNames: PlasmicAward__VariantProps,
    });

    return PlasmicAward__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAward";
  } else {
    func.displayName = `PlasmicAward.${nodeName}`;
  }
  return func;
}

export const PlasmicAward = Object.assign(
  // Top-level PlasmicAward renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicAward
    internalVariantProps: PlasmicAward__VariantProps,
    internalArgProps: PlasmicAward__ArgProps,
  }
);

export default PlasmicAward;
/* prettier-ignore-end */
