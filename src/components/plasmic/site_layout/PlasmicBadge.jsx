// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: Zh0Xu99edL
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicBadge.css"; // plasmic-import: Zh0Xu99edL/css

export const PlasmicBadge__VariantProps = new Array("type");

export const PlasmicBadge__ArgProps = new Array("children");

function PlasmicBadge__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_oH8FCw6CW4Lg76cBx26GoT",
        "Badge__root__hcdhM",
        {
          Badge__root__type_featured__hcdhMHbdsW: hasVariant(
            variants,
            "type",
            "featured"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Badge__box__dvTjy"
        )}
      >
        <p.PlasmicSlot
          defaultContents={""}
          value={args.children}
          className={classNames("Badge__slotChildren___86NGw", {
            Badge__slotChildren__type_featured___86NGwHbdsW: hasVariant(
              variants,
              "type",
              "featured"
            ),
          })}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBadge__ArgProps,
      internalVariantPropNames: PlasmicBadge__VariantProps,
    });

    return PlasmicBadge__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBadge";
  } else {
    func.displayName = `PlasmicBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicBadge = Object.assign(
  // Top-level PlasmicBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicBadge
    internalVariantProps: PlasmicBadge__VariantProps,
    internalArgProps: PlasmicBadge__ArgProps,
  }
);

export default PlasmicBadge;
/* prettier-ignore-end */
