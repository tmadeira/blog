// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: xQNaB3lXQB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicCode.css"; // plasmic-import: xQNaB3lXQB/css

export const PlasmicCode__VariantProps = new Array();

export const PlasmicCode__ArgProps = new Array("children");

function PlasmicCode__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <code
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__code",
        "root_reset_oH8FCw6CW4Lg76cBx26GoT",
        "Code__root__jhD"
      )}
    >
      <pre
        data-plasmic-name={"pre"}
        data-plasmic-override={overrides.pre}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__pre",
          "Code__pre__rjIj0"
        )}
      >
        <p.PlasmicSlot
          defaultContents={
            '#include <stdio.h>\n\nint main() {\n  printf("Hello World!");\n  return 0;\n}'
          }
          value={args.children}
          className={classNames("Code__slotChildren__hDrw")}
        />
      </pre>
    </code>
  );
}

const PlasmicDescendants = {
  root: ["root", "pre"],
  pre: ["pre"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCode__ArgProps,
      internalVariantPropNames: PlasmicCode__VariantProps,
    });

    return PlasmicCode__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCode";
  } else {
    func.displayName = `PlasmicCode.${nodeName}`;
  }
  return func;
}

export const PlasmicCode = Object.assign(
  // Top-level PlasmicCode renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pre: makeNodeComponent("pre"),
    // Metadata about props expected for PlasmicCode
    internalVariantProps: PlasmicCode__VariantProps,
    internalArgProps: PlasmicCode__ArgProps,
  }
);

export default PlasmicCode;
/* prettier-ignore-end */
