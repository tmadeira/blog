/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: xQNaB3lXQB
import * as React from "react";
import {
  classNames,
  Renderer,
  createPlasmicElementProxy,
  PlasmicSlot,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicCode.css"; // plasmic-import: xQNaB3lXQB/css

export const PlasmicCode__VariantProps = new Array();

export const PlasmicCode__ArgProps = new Array("children");

function PlasmicCode__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <code
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "Code__root--baseMedium__JhD_-e4T3i_MVUpr": true,
        "Code__root__JhD_-": true,
        "plasmic-default__all": true,
        "plasmic-default__code": true
      })}
    >
      <pre
        data-plasmic-name={"pre"}
        data-plasmic-override={overrides.pre}
        className={classNames({
          "Code__pre--baseMedium__rjIJ0e4T3i_MVUpr": true,
          Code__pre__rjIJ0: true,
          "plasmic-default__all": true,
          "plasmic-default__pre": true
        })}
      >
        <PlasmicSlot
          defaultContents={
            '#include <stdio.h>\n\nint main() {\n  printf("Hello World!");\n  return 0;\n}'
          }
          value={args.children}
          className={classNames({
            "Code__slotChildren--baseMedium__H_Drwe4T3i_MVUpr": true,
            Code__slotChildren__H_Drw: true
          })}
        />
      </pre>
    </code>
  );
}

class PlasmicCode__Renderer extends Renderer {
  constructor(variants, args) {
    super(variants, args, PlasmicCode__RenderFunc, "root");
  }
  create(variants, args) {
    return new PlasmicCode__Renderer(variants, args);
  }
  getInternalVariantProps() {
    return PlasmicCode__VariantProps;
  }
  getInternalArgProps() {
    return PlasmicCode__ArgProps;
  }
  forNode(name) {
    return super.forNode(name);
  }
}

export const PlasmicCode = function PlasmicCodeRoot(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "root",
    descendantNames: ["root", "pre"],
    internalArgPropNames: PlasmicCode__ArgProps,
    internalVariantPropNames: PlasmicCode__VariantProps
  });

  return PlasmicCode__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "root"
  });
};

PlasmicCode.pre = function PlasmicCodePre(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "pre",
    descendantNames: ["pre"],
    internalArgPropNames: PlasmicCode__ArgProps,
    internalVariantPropNames: PlasmicCode__VariantProps
  });

  return PlasmicCode__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "pre"
  });
};

PlasmicCode.createRenderer = () => new PlasmicCode__Renderer({}, {});

export default PlasmicCode;
/* prettier-ignore-end */
