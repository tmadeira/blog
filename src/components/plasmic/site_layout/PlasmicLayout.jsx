/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: 29WTxWrj0J9
import * as React from "react";
import {
  classNames,
  Renderer,
  createPlasmicElementProxy,
  PlasmicSlot,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import MenuItem from "../../MenuItem"; // plasmic-import: HXZAepZU2F/component
import { ScreenContext } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: fOWX3a-rE7c/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicLayout.css"; // plasmic-import: 29WTxWrj0J9/css
import GithubIcon from "./PlasmicIcon__Github"; // plasmic-import: 2CRUWf376/icon
import GitlabsvgIcon from "./PlasmicIcon__Gitlabsvg"; // plasmic-import: tCt3kPm8k/icon
import LinkedinIcon from "./PlasmicIcon__Linkedin"; // plasmic-import: Xch0_c3Sh/icon
import TwitterIcon from "./PlasmicIcon__Twitter"; // plasmic-import: Ws255ApOB/icon

export const PlasmicLayout__VariantProps = new Array();

export const PlasmicLayout__ArgProps = new Array(
  "children",
  "title",
  "copyright"
);

function PlasmicLayout__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = {
    screen: React.useContext(ScreenContext)
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames({
        "Layout__root--baseMedium__aI0qRpXt1y_MVUpr": true,
        Layout__root__aI0qR: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true
      })}
    >
      <header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames({
          "Layout__header--baseMedium__UYLc5pXt1y_MVUpr": true,
          Layout__header__UYLc5: true,
          "plasmic-default__all": true,
          "plasmic-default__header": true
        })}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames({
            "Layout__h1--baseMedium__rIXDopXt1y_MVUpr": true,
            Layout__h1__rIXDo: true,
            "plasmic-default__all": true,
            "plasmic-default__h1": true
          })}
        >
          <PlasmicSlot
            defaultContents={"Title"}
            value={args.title}
            className={classNames({
              "Layout__slotTitle--baseMedium__cDKfvpXt1y_MVUpr": true,
              Layout__slotTitle__cDKfv: true
            })}
          />
        </h1>

        <ul
          data-plasmic-name={"menu"}
          data-plasmic-override={overrides.menu}
          className={classNames({
            "Layout__menu--baseMedium__tzecmpXt1y_MVUpr": true,
            Layout__menu__tzecm: true,
            "plasmic-default__all": true,
            "plasmic-default__ul": true
          })}
        >
          <li
            data-plasmic-name={"menuItem1"}
            data-plasmic-override={overrides.menuItem1}
            className={classNames({
              Layout__menuItem1__m5TbA: true,
              "plasmic-default__all": true,
              "plasmic-default__li": true
            })}
          >
            <a
              className={classNames({
                Layout__link__EMr3f: true,
                "plasmic-default__a": true,
                "plasmic-default__all": true
              })}
              href={"/"}
            >
              <MenuItem
                className={classNames({
                  "Layout__menuItem--baseMedium__jmD-jpXt1y_MVUpr": true,
                  "Layout__menuItem__jmD-j": true,
                  __wab_instance: true
                })}
                {...{}}
              >
                {"About\n"}
              </MenuItem>
            </a>
          </li>

          <li
            className={classNames({
              Layout__li__C_VYS: true,
              "plasmic-default__all": true,
              "plasmic-default__li": true
            })}
          >
            <a
              className={classNames({
                Layout__link__k2WhV: true,
                "plasmic-default__a": true,
                "plasmic-default__all": true
              })}
              href={"/blog"}
            >
              <MenuItem
                className={classNames({
                  Layout__menuItem__s2WLh: true,
                  __wab_instance: true
                })}
                {...{}}
              >
                {"Blog\n"}
              </MenuItem>
            </a>
          </li>
        </ul>
      </header>

      <main
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        className={classNames({
          "Layout__main--baseMedium___Gr8wpXt1y_MVUpr": true,
          Layout__main___Gr8w: true,
          "plasmic-default__all": true,
          "plasmic-default__main": true
        })}
      >
        <div
          data-plasmic-name={"wrap"}
          data-plasmic-override={overrides.wrap}
          data-plasmic-wrap-flex-child={true}
          className={classNames({
            "Layout__wrap--baseMedium__3hA2CpXt1y_MVUpr": true,
            Layout__wrap__3hA2C: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <PlasmicSlot defaultContents={undefined} value={args.children} />
        </div>
      </main>

      <footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames({
          "Layout__footer--baseMedium__aBLS8pXt1y_MVUpr": true,
          Layout__footer__aBLS8: true,
          "plasmic-default__all": true,
          "plasmic-default__footer": true
        })}
      >
        <div
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          data-plasmic-wrap-flex-child={true}
          className={classNames({
            "Layout__box--baseMedium__rgYZtpXt1y_MVUpr": true,
            Layout__box__rgYZt: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          <PlasmicSlot
            defaultContents={"© 2005–2020 Tiago Madeira"}
            value={args.copyright}
            className={classNames({
              "Layout__slotCopyright--baseMedium__ARz6EpXt1y_MVUpr": true,
              Layout__slotCopyright__ARz6E: true
            })}
          />

          <ul
            data-plasmic-name={"social"}
            data-plasmic-override={overrides.social}
            data-plasmic-wrap-flex-child={true}
            className={classNames({
              "Layout__social--baseMedium__ejcDQpXt1y_MVUpr": true,
              Layout__social__ejcDQ: true,
              "plasmic-default__all": true,
              "plasmic-default__ul": true
            })}
          >
            <li
              className={classNames({
                "Layout__li--baseMedium__r4FLEpXt1y_MVUpr": true,
                Layout__li__r4FLE: true,
                "plasmic-default__all": true,
                "plasmic-default__li": true
              })}
            >
              <a
                className={classNames({
                  Layout__link__LjS1J: true,
                  "plasmic-default__a": true,
                  "plasmic-default__all": true
                })}
              >
                <GithubIcon
                  className={classNames({
                    "Layout__svg--baseMedium__HRIUXpXt1y_MVUpr": true,
                    Layout__svg__HRIUX: true,
                    "plasmic-default__all": true,
                    "plasmic-default__svg": true
                  })}
                  role={"img"}
                  {...{}}
                ></GithubIcon>
              </a>
            </li>

            <li
              className={classNames({
                Layout__li__o4yZy: true,
                "plasmic-default__all": true,
                "plasmic-default__li": true
              })}
            >
              <a
                className={classNames({
                  Layout__link__g74NJ: true,
                  "plasmic-default__a": true,
                  "plasmic-default__all": true
                })}
              >
                <GitlabsvgIcon
                  className={classNames({
                    Layout__svg__TEQeF: true,
                    "plasmic-default__all": true,
                    "plasmic-default__svg": true
                  })}
                  role={"img"}
                  {...{}}
                ></GitlabsvgIcon>
              </a>
            </li>

            <li
              className={classNames({
                Layout__li__dfAEI: true,
                "plasmic-default__all": true,
                "plasmic-default__li": true
              })}
            >
              <a
                className={classNames({
                  Layout__link__53gnk: true,
                  "plasmic-default__a": true,
                  "plasmic-default__all": true
                })}
              >
                <LinkedinIcon
                  className={classNames({
                    Layout__svg__cEbZT: true,
                    "plasmic-default__all": true,
                    "plasmic-default__svg": true
                  })}
                  role={"img"}
                  {...{}}
                ></LinkedinIcon>
              </a>
            </li>

            <li
              className={classNames({
                Layout__li__caRBI: true,
                "plasmic-default__all": true,
                "plasmic-default__li": true
              })}
            >
              <a
                className={classNames({
                  Layout__link__i7rjL: true,
                  "plasmic-default__a": true,
                  "plasmic-default__all": true
                })}
              >
                <TwitterIcon
                  className={classNames({
                    Layout__svg__qz1sw: true,
                    "plasmic-default__all": true,
                    "plasmic-default__svg": true
                  })}
                  role={"img"}
                  {...{}}
                ></TwitterIcon>
              </a>
            </li>
          </ul>
        </div>
      </footer>
    </div>
  );
}

class PlasmicLayout__Renderer extends Renderer {
  constructor(variants, args) {
    super(variants, args, PlasmicLayout__RenderFunc, "root");
  }
  create(variants, args) {
    return new PlasmicLayout__Renderer(variants, args);
  }
  getInternalVariantProps() {
    return PlasmicLayout__VariantProps;
  }
  getInternalArgProps() {
    return PlasmicLayout__ArgProps;
  }
  forNode(name) {
    return super.forNode(name);
  }
}

export const PlasmicLayout = function PlasmicLayoutRoot(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "root",
    descendantNames: [
      "root",
      "header",
      "h1",
      "menu",
      "menuItem1",
      "main",
      "wrap",
      "footer",
      "box",
      "social"
    ],

    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "root"
  });
};

PlasmicLayout.header = function PlasmicLayoutHeader(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "header",
    descendantNames: ["header", "h1", "menu", "menuItem1"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "header"
  });
};

PlasmicLayout.h1 = function PlasmicLayoutH1(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "h1",
    descendantNames: ["h1"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "h1"
  });
};

PlasmicLayout.menu = function PlasmicLayoutMenu(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "menu",
    descendantNames: ["menu", "menuItem1"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "menu"
  });
};

PlasmicLayout.menuItem1 = function PlasmicLayoutMenuItem1(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "menuItem1",
    descendantNames: ["menuItem1"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "menuItem1"
  });
};

PlasmicLayout.main = function PlasmicLayoutMain(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "main",
    descendantNames: ["main", "wrap"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "main"
  });
};

PlasmicLayout.wrap = function PlasmicLayoutWrap(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "wrap",
    descendantNames: ["wrap"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "wrap"
  });
};

PlasmicLayout.footer = function PlasmicLayoutFooter(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "footer",
    descendantNames: ["footer", "box", "social"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "footer"
  });
};

PlasmicLayout.box = function PlasmicLayoutBox(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "box",
    descendantNames: ["box", "social"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "box"
  });
};

PlasmicLayout.social = function PlasmicLayoutSocial(props) {
  const { variants, args, overrides } = deriveRenderOpts(props, {
    name: "social",
    descendantNames: ["social"],
    internalArgPropNames: PlasmicLayout__ArgProps,
    internalVariantPropNames: PlasmicLayout__VariantProps
  });

  return PlasmicLayout__RenderFunc({
    variants,
    args,
    overrides,
    forNode: "social"
  });
};

PlasmicLayout.createRenderer = () => new PlasmicLayout__Renderer({}, {});

export default PlasmicLayout;
/* prettier-ignore-end */
