// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: 29WTxWrj0J9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import MenuItem from "../../MenuItem"; // plasmic-import: HXZAepZU2F/component
import { useScreenVariants } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: fOWX3a-rE7c/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicLayout.css"; // plasmic-import: 29WTxWrj0J9/css
import GithubIcon from "./PlasmicIcon__Github"; // plasmic-import: 2CRUWf376/icon
import GitlabsvgIcon from "./PlasmicIcon__Gitlabsvg"; // plasmic-import: tCt3kPm8k/icon
import LinkedinIcon from "./PlasmicIcon__Linkedin"; // plasmic-import: Xch0_c3Sh/icon
import TwitterIcon from "./PlasmicIcon__Twitter"; // plasmic-import: Ws255ApOB/icon

export const PlasmicLayout__VariantProps = new Array();

export const PlasmicLayout__ArgProps = new Array(
  "children",
  "title",
  "copyright"
);

function PlasmicLayout__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={hasVariant(globalVariants, "screen", "medium") ? true : false}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_oH8FCw6CW4Lg76cBx26GoT",
        "Layout__root__aI0QR"
      )}
    >
      <header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__header",
          "Layout__header__uyLc5"
        )}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__h1",
            "Layout__h1__rIxDo"
          )}
        >
          <p.PlasmicSlot
            defaultContents={"Title"}
            value={args.title}
            className={classNames("Layout__slotTitle__cDKfv")}
          />
        </h1>

        <ul
          data-plasmic-name={"menu"}
          data-plasmic-override={overrides.menu}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__ul",
            "Layout__menu__tzecm"
          )}
        >
          <li
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__li",
              "Layout__li__m5TbA"
            )}
          >
            <a
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__a",
                "Layout__link__eMr3F"
              )}
              href={"/"}
            >
              <MenuItem
                className={classNames(
                  "__wab_instance",
                  "Layout__menuItem__jmDJ"
                )}
              >
                {"About"}
              </MenuItem>
            </a>
          </li>

          <li
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__li",
              "Layout__li__cVys"
            )}
          >
            <a
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__a",
                "Layout__link__k2WhV"
              )}
              href={"/blog"}
            >
              <MenuItem
                className={classNames(
                  "__wab_instance",
                  "Layout__menuItem__s2WLh"
                )}
              >
                {"Blog"}
              </MenuItem>
            </a>
          </li>
        </ul>
      </header>

      <main
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__main",
          "Layout__main__gr8W"
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"wrap"}
          data-plasmic-override={overrides.wrap}
          hasGap={true}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Layout__wrap___3HA2C"
          )}
        >
          <p.PlasmicSlot defaultContents={null} value={args.children} />
        </p.Stack>
      </main>

      <p.Stack
        as={"footer"}
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        hasGap={hasVariant(globalVariants, "screen", "medium") ? true : false}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__footer",
          "Layout__footer__aBls8"
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          hasGap={true}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Layout__box__rgYZt"
          )}
        >
          <p.PlasmicSlot
            defaultContents={"© 2005–2020 Tiago Madeira"}
            value={args.copyright}
            className={classNames("Layout__slotCopyright__aRz6E")}
          />

          <p.Stack
            as={"ul"}
            data-plasmic-name={"social"}
            data-plasmic-override={overrides.social}
            hasGap={true}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__ul",
              "Layout__social__ejcDq"
            )}
          >
            <li
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__li",
                "Layout__li__r4Fle"
              )}
            >
              <a
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__a",
                  "Layout__link__ljS1J"
                )}
                href={"https://github.com/tmadeira/"}
              >
                <GithubIcon
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__svg",
                    "Layout__svg__hriux"
                  )}
                  role={"img"}
                />
              </a>
            </li>

            <li
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__li",
                "Layout__li__o4YZy"
              )}
            >
              <a
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__a",
                  "Layout__link__g74Nj"
                )}
                href={"https://gitlab.com/tmadeira/"}
              >
                <GitlabsvgIcon
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__svg",
                    "Layout__svg__teQeF"
                  )}
                  role={"img"}
                />
              </a>
            </li>

            <li
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__li",
                "Layout__li__dfAei"
              )}
            >
              <a
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__a",
                  "Layout__link___53Gnk"
                )}
                href={"https://linkedin.com/in/tmadeira/"}
              >
                <LinkedinIcon
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__svg",
                    "Layout__svg__cEbZt"
                  )}
                  role={"img"}
                />
              </a>
            </li>

            <li
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__li",
                "Layout__li__caRbi"
              )}
            >
              <a
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__a",
                  "Layout__link__i7RjL"
                )}
                href={"https://twitter.com/tmadeira/"}
              >
                <TwitterIcon
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__svg",
                    "Layout__svg__qz1Sw"
                  )}
                  role={"img"}
                />
              </a>
            </li>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "h1",
    "menu",
    "main",
    "wrap",
    "footer",
    "box",
    "social",
  ],

  header: ["header", "h1", "menu"],
  h1: ["h1"],
  menu: ["menu"],
  main: ["main", "wrap"],
  wrap: ["wrap"],
  footer: ["footer", "box", "social"],
  box: ["box", "social"],
  social: ["social"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLayout__ArgProps,
      internalVariantPropNames: PlasmicLayout__VariantProps,
    });

    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    menu: makeNodeComponent("menu"),
    main: makeNodeComponent("main"),
    wrap: makeNodeComponent("wrap"),
    footer: makeNodeComponent("footer"),
    box: makeNodeComponent("box"),
    social: makeNodeComponent("social"),
    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps,
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
