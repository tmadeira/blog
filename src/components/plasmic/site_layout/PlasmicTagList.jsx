// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oH8FCw6CW4Lg76cBx26GoT
// Component: 5P9Z-2oNX3
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Badge from "../../Badge"; // plasmic-import: Zh0Xu99edL/component
import { useScreenVariants } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: fOWX3a-rE7c/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_site_layout.css"; // plasmic-import: oH8FCw6CW4Lg76cBx26GoT/projectcss
import "./PlasmicTagList.css"; // plasmic-import: 5P9Z-2oNX3/css

export const PlasmicTagList__VariantProps = new Array();

export const PlasmicTagList__ArgProps = new Array("children");

function PlasmicTagList__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_oH8FCw6CW4Lg76cBx26GoT",
        "TagList__root__mSz5X"
      )}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "__wab_text",
          "TagList__box___6CGf"
        )}
      >
        {"Tags:"}
      </div>

      <p.PlasmicSlot
        defaultContents={
          <Badge
            data-plasmic-name={"badge"}
            data-plasmic-override={overrides.badge}
            className={classNames("__wab_instance", "TagList__badge__vx6Sn")}
          >
            {"tag"}
          </Badge>
        }
        value={args.children}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "box", "badge"],
  box: ["box"],
  badge: ["badge"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTagList__ArgProps,
      internalVariantPropNames: PlasmicTagList__VariantProps,
    });

    return PlasmicTagList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTagList";
  } else {
    func.displayName = `PlasmicTagList.${nodeName}`;
  }
  return func;
}

export const PlasmicTagList = Object.assign(
  // Top-level PlasmicTagList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    badge: makeNodeComponent("badge"),
    // Metadata about props expected for PlasmicTagList
    internalVariantProps: PlasmicTagList__VariantProps,
    internalArgProps: PlasmicTagList__ArgProps,
  }
);

export default PlasmicTagList;
/* prettier-ignore-end */
